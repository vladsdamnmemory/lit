var lit=function(t){var e={};function o(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,o),i.l=!0,i.exports}return o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)o.d(r,i,function(e){return t[e]}.bind(null,i));return r},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ViewportWatcher=e.XStickyScroll=void 0;var r=o(1);Object.defineProperty(e,"XStickyScroll",{enumerable:!0,get:function(){return r.XStickyScroll}});var i=o(2);Object.defineProperty(e,"ViewportWatcher",{enumerable:!0,get:function(){return i.ViewportWatcher}})},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.XStickyScroll=void 0;var r=function(){function t(t,e){this.host=t,this.scrollBarClass=e,this.init()}return t.topOffset=function(t){return t.getBoundingClientRect().top+pageYOffset},t.bottomOffset=function(t){return t.getBoundingClientRect().bottom+pageYOffset},t.insertNodeAfter=function(t,e){e.parentNode&&e.parentNode.insertBefore(t,e.nextSibling)},t.updateScroll=function(t,e){return e.scrollLeft=t.scrollLeft},t.prototype.init=function(){var e=this;this.onResize=function(){e.fitScrollBar(),e.controlWithinArea()},this.onScroll=function(){e.controlWithinArea(),e.fitScrollBar()},window.addEventListener("scroll",this.onScroll,!1),window.addEventListener("resize",this.onResize,!1),this.onViewScroll=function(o){o.target===e.scrollView?t.updateScroll(e.scrollView,e.scrollbar):t.updateScroll(e.scrollbar,e.scrollView)},this.scrollView=this.host,this.scrollView.style.overflowY="hidden",this.scrollView.style.whiteSpace="pre",this.scrollbar=document.createElement("div"),this.scrollbar.className="sticky-scrollbar "+this.scrollBarClass,this.scrollbar.style.overflowX="auto",this.scrollbar.style.position="fixed",this.scrollbar.style.bottom="0",this.scrollbar.style.zIndex="999",this.fakeContent=document.createElement("div"),this.scrollbar.appendChild(this.fakeContent),this.fakeContent.className="fake-content",this.fakeContent.style.height="1px",t.insertNodeAfter(this.scrollbar,this.scrollView),this.scrollView.addEventListener("scroll",this.onViewScroll),this.scrollbar.addEventListener("scroll",this.onViewScroll),this.onResize()},t.prototype.controlWithinArea=function(){var e,o,r,i,s=0;this.scrollView&&(s=this.scrollView.offsetHeight-this.scrollView.clientHeight),e=t.topOffset(this.scrollbar),o=t.bottomOffset(this.scrollbar),r=t.topOffset(this.scrollView),i=t.bottomOffset(this.scrollView),this.scrollbar.style.left=e-s>r&&o<i?"":"-9999999px"},t.prototype.fitScrollBar=function(){this.fakeContent&&this.scrollbar&&this.scrollView&&(this.fakeContent.style.width=this.scrollView.scrollWidth+"px",this.scrollbar.style.width=this.scrollView.offsetWidth+"px")},t.prototype.destroy=function(){if(this.fakeContent&&this.scrollbar&&this.scrollView)try{this.scrollView.removeEventListener("scroll",this.onViewScroll),this.scrollbar.removeEventListener("scroll",this.onViewScroll),window.removeEventListener("scroll",this.onScroll),window.removeEventListener("resize",this.onResize),this.scrollView.style.overflowY="",this.scrollView.style.whiteSpace="",this.scrollbar.remove(),this.fakeContent.remove(),delete this.scrollbar,delete this.fakeContent,console.log("Have killed DOM elements...")}catch(t){console.error(t)}},t}();e.XStickyScroll=r},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ViewportWatcher=void 0;var r=function(){function t(e,o,r,i){var s,n,l,c,a,f,h,u=this;void 0===r&&(r=0),void 0===i&&(i=!1),this.nodes=Array.prototype.slice.call(e),this.menuItems=Array.prototype.slice.call(o),this.topOffset=r,this.enableClickListeners=i,this.enableClickListeners&&(this.scrollIntoView=function(t){var e;if(e=t.currentTarget||t.target){var o,r;o=u.menuItems.indexOf(e),r=u.nodes[o].getBoundingClientRect().top+window.pageYOffset-u.topOffset,window.scrollTo({top:r,behavior:"smooth"})}else console.error("Could not find a target of clicked element")},this.menuItems.forEach((function(t){t.addEventListener("click",u.scrollIntoView,!1)}))),this.setActive=function(){var e;for(l=!1,c=Math.floor(window.pageYOffset+u.topOffset),0,s=u.nodes.length,n=--s;n>=0;n--)h=u.nodes[n].getBoundingClientRect(),a=Math.floor(h.top+window.pageYOffset),f=Math.floor(h.bottom+window.pageYOffset),e=u.menuItems[n],c>=a&&!l||0===n&&c<=f?(t.classList("add",e),l=!0):t.classList("remove",e)},window.addEventListener("scroll",this.setActive,!1),window.addEventListener("resize",this.setActive,!1),this.setActive()}return t.classList=function(t,e){e.classList[t]("vw-active")},t.prototype.refresh=function(){this.setActive()},t.prototype.reconstruct=function(e,o,r,i){return void 0===r&&(r=0),void 0===i&&(i=!1),this.destroy(),new t(e,o,r,i)},t.prototype.destroy=function(){var e=this;window.removeEventListener("scroll",this.setActive,!1),window.removeEventListener("resize",this.setActive,!1),this.menuItems.forEach((function(o){o.removeEventListener("click",e.scrollIntoView,!1),t.classList("remove",o)}))},t}();e.ViewportWatcher=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
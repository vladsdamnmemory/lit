var lit=function(e){var t={};function o(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,o),i.l=!0,i.exports}return o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)o.d(r,i,function(t){return e[t]}.bind(null,i));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ViewportWatcher=t.XStickyScroll=void 0;var r=o(1);Object.defineProperty(t,"XStickyScroll",{enumerable:!0,get:function(){return r.XStickyScroll}});var i=o(2);Object.defineProperty(t,"ViewportWatcher",{enumerable:!0,get:function(){return i.ViewportWatcher}})},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XStickyScroll=void 0;var r=function(){function e(e,t){this.host=e,this.scrollBarClass=t,this.init()}return e.topOffset=function(e){return e.getBoundingClientRect().top+pageYOffset},e.bottomOffset=function(e){return e.getBoundingClientRect().bottom+pageYOffset},e.insertNodeAfter=function(e,t){t.parentNode&&t.parentNode.insertBefore(e,t.nextSibling)},e.updateScroll=function(e,t){return t.scrollLeft=e.scrollLeft},e.prototype.init=function(){var t=this;this.onResize=function(){t.fitScrollBar(),t.controlWithinArea()},this.onScroll=function(){t.controlWithinArea(),t.fitScrollBar()},window.addEventListener("scroll",this.onScroll,!1),window.addEventListener("resize",this.onResize,!1),this.onViewScroll=function(o){o.target===t.scrollView?e.updateScroll(t.scrollView,t.scrollbar):e.updateScroll(t.scrollbar,t.scrollView)},this.scrollView=this.host,this.scrollView.style.overflowY="hidden",this.scrollView.style.whiteSpace="pre",this.scrollbar=document.createElement("div"),this.scrollbar.className="sticky-scrollbar "+this.scrollBarClass,this.scrollbar.style.overflowX="auto",this.scrollbar.style.position="fixed",this.scrollbar.style.bottom="0",this.scrollbar.style.zIndex="999",this.fakeContent=document.createElement("div"),this.scrollbar.appendChild(this.fakeContent),this.fakeContent.className="fake-content",this.fakeContent.style.height="1px",e.insertNodeAfter(this.scrollbar,this.scrollView),this.scrollView.addEventListener("scroll",this.onViewScroll),this.scrollbar.addEventListener("scroll",this.onViewScroll),this.onResize()},e.prototype.controlWithinArea=function(){var t,o,r,i,s=0;this.scrollView&&(s=this.scrollView.offsetHeight-this.scrollView.clientHeight),t=e.topOffset(this.scrollbar),o=e.bottomOffset(this.scrollbar),r=e.topOffset(this.scrollView),i=e.bottomOffset(this.scrollView),this.scrollbar.style.left=t-s>r&&o<i?"":"-9999999px"},e.prototype.fitScrollBar=function(){this.fakeContent&&this.scrollbar&&this.scrollView&&(this.fakeContent.style.width=this.scrollView.scrollWidth+"px",this.scrollbar.style.width=this.scrollView.offsetWidth+"px")},e.prototype.destroy=function(){if(this.fakeContent&&this.scrollbar&&this.scrollView)try{this.scrollView.removeEventListener("scroll",this.onViewScroll),this.scrollbar.removeEventListener("scroll",this.onViewScroll),window.removeEventListener("scroll",this.onScroll),window.removeEventListener("resize",this.onResize),this.scrollView.style.overflowY="",this.scrollView.style.whiteSpace="",this.scrollbar.remove(),this.fakeContent.remove(),delete this.scrollbar,delete this.fakeContent,console.log("Have killed DOM elements...")}catch(e){console.error(e)}},e}();t.XStickyScroll=r},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ViewportWatcher=void 0;var r=function(){function e(t,o,r,i){var s,n,l,c,a,f,h=this;void 0===r&&(r=0),void 0===i&&(i=!1),this.nodes=Array.prototype.slice.call(t),this.menuItems=Array.prototype.slice.call(o),this.topOffset=r,this.enableClickListeners=i,this.enableClickListeners&&(this.scrollIntoView=function(e){var t;if(t=e.currentTarget||e.target){var o,r;o=h.menuItems.indexOf(t),r=h.nodes[o].getBoundingClientRect().top+window.pageYOffset-h.topOffset,window.scrollTo({top:r,behavior:"smooth"})}else console.error("Could not find a target of clicked element")},this.menuItems.forEach((function(e){e.addEventListener("click",h.scrollIntoView,!1)}))),this.setActive=function(){var t;for(l=!1,c=Math.ceil(window.pageYOffset+h.topOffset),0,s=h.nodes.length,n=--s;n>=0;n--)f=h.nodes[n].getBoundingClientRect(),a=Math.floor(f.top+window.pageYOffset),t=h.menuItems[n],c>=a&&!l||0===n&&c<a?(e.classList("add",t),l=!0):e.classList("remove",t)},window.addEventListener("scroll",this.setActive,!1),window.addEventListener("resize",this.setActive,!1),this.setActive()}return e.classList=function(e,t){t.classList[e]("vw-active")},e.prototype.refresh=function(){this.setActive()},e.prototype.reconstruct=function(t,o,r,i){return void 0===r&&(r=0),void 0===i&&(i=!1),this.destroy(),new e(t,o,r,i)},e.prototype.destroy=function(){var t=this;window.removeEventListener("scroll",this.setActive,!1),window.removeEventListener("resize",this.setActive,!1),this.menuItems.forEach((function(o){o.removeEventListener("click",t.scrollIntoView,!1),e.classList("remove",o)}))},e}();t.ViewportWatcher=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
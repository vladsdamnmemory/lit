var lit=function(t){var e={};function r(l){if(e[l])return e[l].exports;var s=e[l]={i:l,l:!1,exports:{}};return t[l].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=t,r.c=e,r.d=function(t,e,l){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:l})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var l=Object.create(null);if(r.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(l,s,function(e){return t[e]}.bind(null,s));return l},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e),r.d(e,"XStickyScroll",(function(){return l}));class l{static topOffset(t){return t.getBoundingClientRect().top+pageYOffset}static bottomOffset(t){return t.getBoundingClientRect().bottom+pageYOffset}static insertNodeAfter(t,e){e.parentNode&&e.parentNode.insertBefore(t,e.nextSibling)}static updateScroll(t,e){return e.scrollLeft=t.scrollLeft}constructor(t,e){this.host=t,this.scrollBarClass=e,this.init()}init(){this.onResize=()=>{this.fitScrollBar(),this.controlWithinArea()},this.onScroll=()=>{this.controlWithinArea(),this.fitScrollBar()},window.addEventListener("scroll",this.onScroll,!1),window.addEventListener("resize",this.onResize,!1),this.onViewScroll=t=>{t.target===this.scrollView?l.updateScroll(this.scrollView,this.scrollbar):l.updateScroll(this.scrollbar,this.scrollView)},this.scrollView=this.host,this.scrollView.style.overflowY="hidden",this.scrollView.style.whiteSpace="pre",this.scrollbar=document.createElement("div"),this.scrollbar.className="sticky-scrollbar "+this.scrollBarClass,this.scrollbar.style.overflowX="auto",this.scrollbar.style.position="fixed",this.scrollbar.style.bottom="0",this.scrollbar.style.zIndex="999",this.fakeContent=document.createElement("div"),this.scrollbar.appendChild(this.fakeContent),this.fakeContent.className="fake-content",this.fakeContent.style.height="1px",l.insertNodeAfter(this.scrollbar,this.scrollView),this.scrollView.addEventListener("scroll",this.onViewScroll),this.scrollbar.addEventListener("scroll",this.onViewScroll),this.onResize()}controlWithinArea(){let t,e,r,s,o=0;this.scrollView&&(o=this.scrollView.offsetHeight-this.scrollView.clientHeight),t=l.topOffset(this.scrollbar),e=l.bottomOffset(this.scrollbar),r=l.topOffset(this.scrollView),s=l.bottomOffset(this.scrollView),this.scrollbar.style.left=t-o>r&&e<s?"":"-9999999px"}fitScrollBar(){this.fakeContent&&this.scrollbar&&this.scrollView&&(this.fakeContent.style.width=this.scrollView.scrollWidth+"px",this.scrollbar.style.width=this.scrollView.offsetWidth+"px")}destroy(){if(this.fakeContent&&this.scrollbar&&this.scrollView)try{this.scrollView.removeEventListener("scroll",this.onViewScroll),this.scrollbar.removeEventListener("scroll",this.onViewScroll),window.removeEventListener("scroll",this.onScroll),window.removeEventListener("resize",this.onResize),this.scrollView.style.overflowY="",this.scrollView.style.whiteSpace="",this.scrollbar.remove(),this.fakeContent.remove(),delete this.scrollbar,delete this.fakeContent,console.log("Have killed DOM elements...")}catch(t){console.error(t)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbGl0Ly4vbGliL1hTdGlja3lTY3JvbGwudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJYU3RpY2t5U2Nyb2xsIiwiZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsInBhZ2VZT2Zmc2V0IiwiYm90dG9tIiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJzb3VyY2UiLCJ0YXJnZXQiLCJzY3JvbGxMZWZ0IiwiY29uc3RydWN0b3IiLCJob3N0Iiwic2Nyb2xsQmFyQ2xhc3MiLCJ0aGlzIiwiaW5pdCIsIm9uUmVzaXplIiwiZml0U2Nyb2xsQmFyIiwiY29udHJvbFdpdGhpbkFyZWEiLCJvblNjcm9sbCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblZpZXdTY3JvbGwiLCJldiIsInNjcm9sbFZpZXciLCJ1cGRhdGVTY3JvbGwiLCJzY3JvbGxiYXIiLCJzdHlsZSIsIm92ZXJmbG93WSIsIndoaXRlU3BhY2UiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJvdmVyZmxvd1giLCJwb3NpdGlvbiIsInpJbmRleCIsImZha2VDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJoZWlnaHQiLCJpbnNlcnROb2RlQWZ0ZXIiLCJmYWtlU2Nyb2xsYmFyVG9wT2Zmc2V0IiwiZmFrZVNjcm9sbGJhckJvdHRvbU9mZnNldCIsInZpZXdUb3BPZmZzZXQiLCJ2aWV3Qm90dG9tT2Zmc2V0Iiwic2Nyb2xsQmFyV2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJ0b3BPZmZzZXQiLCJib3R0b21PZmZzZXQiLCJsZWZ0Iiwid2lkdGgiLCJzY3JvbGxXaWR0aCIsIm9mZnNldFdpZHRoIiwiZGVzdHJveSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmUiLCJjb25zb2xlIiwibG9nIiwiZXJyIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJvQkFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUEwRGYsT0FyREFGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixF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QyxFQUNBQyxFQUF5QixFQUV6QjlCLEtBQUtVLGFBQ0xvQixFQUFpQjlCLEtBQUtVLFdBQVdxQixhQUFlL0IsS0FBS1UsV0FBV3NCLGNBR3BFTixFQUF5QjNDLEVBQWNrRCxVQUF1QmpDLEtBQUtZLFdBQ25FZSxFQUE0QjVDLEVBQWNtRCxhQUEwQmxDLEtBQUtZLFdBQ3pFZ0IsRUFBZ0I3QyxFQUFja0QsVUFBdUJqQyxLQUFLVSxZQUMxRG1CLEVBQW1COUMsRUFBY21ELGFBQTBCbEMsS0FBS1UsWUFjNURWLEtBQUtZLFVBQVVDLE1BQU1zQixLQUZwQlQsRUFBeUJJLEVBQWlCRixHQUFrQkQsRUFBNEJFLEVBRTdELEdBR0EsYUFLNUIxQixlQUNBSCxLQUFLc0IsYUFBZXRCLEtBQUtZLFdBQWFaLEtBQUtVLGFBQzNDVixLQUFLc0IsWUFBWVQsTUFBTXVCLE1BQVFwQyxLQUFLVSxXQUFXMkIsWUFBYyxLQUM3RHJDLEtBQUtZLFVBQVVDLE1BQU11QixNQUFRcEMsS0FBS1UsV0FBVzRCLFlBQWMsTUFLNURDLFVBRUgsR0FBSXZDLEtBQUtzQixhQUFldEIsS0FBS1ksV0FBYVosS0FBS1UsV0FFM0MsSUFFSVYsS0FBS1UsV0FBVzhCLG9CQUFvQixTQUFVeEMsS0FBS1EsY0FFbkRSLEtBQUtZLFVBQVU0QixvQkFBb0IsU0FBVXhDLEtBQUtRLGNBRWxERixPQUFPa0Msb0JBQW9CLFNBQVV4QyxLQUFLSyxVQUUxQ0MsT0FBT2tDLG9CQUFvQixTQUFVeEMsS0FBS0UsVUFDMUNGLEtBQUtVLFdBQVdHLE1BQU1DLFVBQVksR0FDbENkLEtBQUtVLFdBQVdHLE1BQU1FLFdBQWEsR0FDbkNmLEtBQUtZLFVBQVU2QixTQUNmekMsS0FBS3NCLFlBQVltQixnQkFDVnpDLEtBQUtZLGlCQUNMWixLQUFLc0IsWUFDWm9CLFFBQVFDLElBQUksK0JBQ2QsTUFBT0MsR0FDTEYsUUFBUUcsTUFBTUQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJleHBvcnQgY2xhc3MgWFN0aWNreVNjcm9sbCB7XG4gICAgaG9zdDogSFRNTEVsZW1lbnQ7XG4gICAgc2Nyb2xsQmFyQ2xhc3M/OiBTdHJpbmc7XG5cbiAgICBzY3JvbGxWaWV3OiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcbiAgICBzY3JvbGxiYXI6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuICAgIGZha2VDb250ZW50OiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZDtcblxuICAgIG9uVmlld1Njcm9sbDogRXZlbnRMaXN0ZW5lciB8IHVuZGVmaW5lZDtcbiAgICBvblNjcm9sbDogRnVuY3Rpb24gfCBFdmVudExpc3RlbmVyIHwgdW5kZWZpbmVkO1xuICAgIG9uUmVzaXplOiBGdW5jdGlvbiB8IEV2ZW50TGlzdGVuZXIgfCB1bmRlZmluZWQ7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIHN0YXRpYyB0b3BPZmZzZXQoZTogSFRNTEVsZW1lbnQpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBwYWdlWU9mZnNldDtcbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIHN0YXRpYyBib3R0b21PZmZzZXQoZTogSFRNTEVsZW1lbnQpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gKyBwYWdlWU9mZnNldDtcbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIHN0YXRpYyBpbnNlcnROb2RlQWZ0ZXIobmV3Tm9kZTogSFRNTEVsZW1lbnQsIHJlZmVyZW5jZU5vZGU6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGlmIChyZWZlcmVuY2VOb2RlLnBhcmVudE5vZGUpIHJlZmVyZW5jZU5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZS5uZXh0U2libGluZyk7XG4gICAgfVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHB1YmxpYyBzdGF0aWMgdXBkYXRlU2Nyb2xsKHNvdXJjZTogSFRNTEVsZW1lbnQsIHRhcmdldDogSFRNTEVsZW1lbnQpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGFyZ2V0LnNjcm9sbExlZnQgPSBzb3VyY2Uuc2Nyb2xsTGVmdDtcbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3RydWN0b3IoaG9zdDogSFRNTEVsZW1lbnQsIHNjcm9sbEJhckNsYXNzOiBTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgICAgICAgdGhpcy5zY3JvbGxCYXJDbGFzcyA9IHNjcm9sbEJhckNsYXNzO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHJpdmF0ZSBpbml0KCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMub25SZXNpemUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZpdFNjcm9sbEJhcigpO1xuICAgICAgICAgICAgdGhpcy5jb250cm9sV2l0aGluQXJlYSgpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMub25TY3JvbGwgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xXaXRoaW5BcmVhKCk7XG4gICAgICAgICAgICB0aGlzLmZpdFNjcm9sbEJhcigpOyAvLyBzb21ldGltZXMgb3B0aW9uYWwuIE5lZWRlZCB3aGVuIERJViBpcyBub3QgZGlzcGxheWVkIHlldFxuICAgICAgICB9O1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwsIGZhbHNlKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uUmVzaXplLCBmYWxzZSk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5vblZpZXdTY3JvbGwgPSBldiA9PiB7XG4gICAgICAgICAgICBldi50YXJnZXQgPT09IHRoaXMuc2Nyb2xsVmlldyA/XG4gICAgICAgICAgICAgICAgWFN0aWNreVNjcm9sbC51cGRhdGVTY3JvbGwodGhpcy5zY3JvbGxWaWV3LCA8SFRNTEVsZW1lbnQ+dGhpcy5zY3JvbGxiYXIpXG4gICAgICAgICAgICAgICAgOiBYU3RpY2t5U2Nyb2xsLnVwZGF0ZVNjcm9sbCg8SFRNTEVsZW1lbnQ+dGhpcy5zY3JvbGxiYXIsIDxIVE1MRWxlbWVudD50aGlzLnNjcm9sbFZpZXcpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmhvc3QpO1xuICAgICAgICAvLyB0aGlzLnNjcm9sbFZpZXcgPSB0aGlzLnNlbGVjdG9yID8gdGhpcy5ob3N0LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZWxlY3RvcikgOiB0aGlzLmhvc3Q7XG4gICAgICAgIHRoaXMuc2Nyb2xsVmlldyA9IHRoaXMuaG9zdDtcbiAgICAgICAgdGhpcy5zY3JvbGxWaWV3LnN0eWxlLm92ZXJmbG93WSA9ICdoaWRkZW4nO1xuICAgICAgICB0aGlzLnNjcm9sbFZpZXcuc3R5bGUud2hpdGVTcGFjZSA9ICdwcmUnO1xuICAgICAgICB0aGlzLnNjcm9sbGJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyLmNsYXNzTmFtZSA9ICdzdGlja3ktc2Nyb2xsYmFyICcgKyB0aGlzLnNjcm9sbEJhckNsYXNzO1xuICAgICAgICB0aGlzLnNjcm9sbGJhci5zdHlsZS5vdmVyZmxvd1ggPSAnYXV0byc7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgICAgdGhpcy5zY3JvbGxiYXIuc3R5bGUuYm90dG9tID0gJzAnO1xuICAgICAgICB0aGlzLnNjcm9sbGJhci5zdHlsZS56SW5kZXggPSAnOTk5JztcbiAgICAgICAgdGhpcy5mYWtlQ29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyLmFwcGVuZENoaWxkKHRoaXMuZmFrZUNvbnRlbnQpO1xuICAgICAgICB0aGlzLmZha2VDb250ZW50LmNsYXNzTmFtZSA9ICdmYWtlLWNvbnRlbnQnO1xuICAgICAgICB0aGlzLmZha2VDb250ZW50LnN0eWxlLmhlaWdodCA9ICcxcHgnO1xuICAgICAgICBYU3RpY2t5U2Nyb2xsLmluc2VydE5vZGVBZnRlcih0aGlzLnNjcm9sbGJhciwgdGhpcy5zY3JvbGxWaWV3KTtcbiAgICAgICAgdGhpcy5zY3JvbGxWaWV3LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25WaWV3U2Nyb2xsKTtcbiAgICAgICAgdGhpcy5zY3JvbGxiYXIuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblZpZXdTY3JvbGwpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMub25SZXNpemUoKTtcbiAgICB9XG5cbiAgICAvLyBNYXkgc2Nyb2xsYmFyIHN0YXkgaW5zaWRlIHRoZSB2aWV3IG9ubHlcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHJpdmF0ZSBjb250cm9sV2l0aGluQXJlYSgpOiB2b2lkIHtcbiAgICAgICAgbGV0IGZha2VTY3JvbGxiYXJUb3BPZmZzZXQ6IG51bWJlcjtcbiAgICAgICAgbGV0IGZha2VTY3JvbGxiYXJCb3R0b21PZmZzZXQ6IG51bWJlcjtcbiAgICAgICAgbGV0IHZpZXdUb3BPZmZzZXQ6IG51bWJlcjtcbiAgICAgICAgbGV0IHZpZXdCb3R0b21PZmZzZXQ6IG51bWJlcjtcbiAgICAgICAgbGV0IHNjcm9sbEJhcldpZHRoOiBudW1iZXIgPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLnNjcm9sbFZpZXcpIHtcbiAgICAgICAgICAgIHNjcm9sbEJhcldpZHRoID0gdGhpcy5zY3JvbGxWaWV3Lm9mZnNldEhlaWdodCAtIHRoaXMuc2Nyb2xsVmlldy5jbGllbnRIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBmYWtlU2Nyb2xsYmFyVG9wT2Zmc2V0ID0gWFN0aWNreVNjcm9sbC50b3BPZmZzZXQoPEhUTUxFbGVtZW50PnRoaXMuc2Nyb2xsYmFyKTtcbiAgICAgICAgZmFrZVNjcm9sbGJhckJvdHRvbU9mZnNldCA9IFhTdGlja3lTY3JvbGwuYm90dG9tT2Zmc2V0KDxIVE1MRWxlbWVudD50aGlzLnNjcm9sbGJhcik7XG4gICAgICAgIHZpZXdUb3BPZmZzZXQgPSBYU3RpY2t5U2Nyb2xsLnRvcE9mZnNldCg8SFRNTEVsZW1lbnQ+dGhpcy5zY3JvbGxWaWV3KTtcbiAgICAgICAgdmlld0JvdHRvbU9mZnNldCA9IFhTdGlja3lTY3JvbGwuYm90dG9tT2Zmc2V0KDxIVE1MRWxlbWVudD50aGlzLnNjcm9sbFZpZXcpO1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZmFrZVNjcm9sbGJhclRvcE9mZnNldD1cIiArIGZha2VTY3JvbGxiYXJUb3BPZmZzZXQsIFwidmlld1RvcE9mZnNldD1cIiArIHZpZXdUb3BPZmZzZXQpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImZha2VTY3JvbGxiYXJCb3R0b21PZmZzZXQ9XCIgKyBmYWtlU2Nyb2xsYmFyQm90dG9tT2Zmc2V0LCBcInZpZXdCb3R0b21PZmZzZXQ9XCIgKyB2aWV3Qm90dG9tT2Zmc2V0KTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJzY3JvbGxCYXJXaWR0aDpcIiwgc2Nyb2xsQmFyV2lkdGgpO1xuXG4gICAgICAgIC8vICYmIGZha2VTY3JvbGxiYXJCb3R0b21PZmZzZXQgPCB2aWV3Qm90dG9tT2Zmc2V0XG4gICAgICAgIGlmICgoZmFrZVNjcm9sbGJhclRvcE9mZnNldCAtIHNjcm9sbEJhcldpZHRoID4gdmlld1RvcE9mZnNldCkgJiYgZmFrZVNjcm9sbGJhckJvdHRvbU9mZnNldCA8IHZpZXdCb3R0b21PZmZzZXQpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsYmFyLnN0eWxlLmxlZnQgPSAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsYmFyLnN0eWxlLmxlZnQgPSAnLTk5OTk5OTlweCc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHJpdmF0ZSBmaXRTY3JvbGxCYXIoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmZha2VDb250ZW50ICYmIHRoaXMuc2Nyb2xsYmFyICYmIHRoaXMuc2Nyb2xsVmlldykge1xuICAgICAgICAgICAgdGhpcy5mYWtlQ29udGVudC5zdHlsZS53aWR0aCA9IHRoaXMuc2Nyb2xsVmlldy5zY3JvbGxXaWR0aCArICdweCc7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbGJhci5zdHlsZS53aWR0aCA9IHRoaXMuc2Nyb2xsVmlldy5vZmZzZXRXaWR0aCArICdweCc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgICAgIC8vIEtpbGwgRE9NIGVsZW1lbnRzXG4gICAgICAgIGlmICh0aGlzLmZha2VDb250ZW50ICYmIHRoaXMuc2Nyb2xsYmFyICYmIHRoaXMuc2Nyb2xsVmlldykge1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFZpZXcucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblZpZXdTY3JvbGwpO1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbGJhci5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm9uVmlld1Njcm9sbCk7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwpO1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLm9uUmVzaXplKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFZpZXcuc3R5bGUub3ZlcmZsb3dZID0gJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxWaWV3LnN0eWxlLndoaXRlU3BhY2UgPSAnJztcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbGJhci5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VDb250ZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNjcm9sbGJhcjtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5mYWtlQ29udGVudDtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkhhdmUga2lsbGVkIERPTSBlbGVtZW50cy4uLlwiKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
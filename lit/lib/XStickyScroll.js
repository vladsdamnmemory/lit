export class XStickyScroll{constructor(t,e){this.host=t,this.scrollBarClass=e,this.init()}static topOffset(t){return t.getBoundingClientRect().top+pageYOffset}static bottomOffset(t){return t.getBoundingClientRect().bottom+pageYOffset}static insertNodeAfter(t,e){e.parentNode&&e.parentNode.insertBefore(t,e.nextSibling)}static updateScroll(t,e){return e.scrollLeft=t.scrollLeft}init(){this.onResize=()=>{this.fitScrollBar(),this.controlWithinArea()},this.onScroll=()=>{this.controlWithinArea(),this.fitScrollBar()},window.addEventListener("scroll",this.onScroll,!1),window.addEventListener("resize",this.onResize,!1),this.onViewScroll=t=>{t.target===this.scrollView?XStickyScroll.updateScroll(this.scrollView,this.scrollbar):XStickyScroll.updateScroll(this.scrollbar,this.scrollView)},this.scrollView=this.host,this.scrollView.style.overflowY="hidden",this.scrollView.style.whiteSpace="pre",this.scrollbar=document.createElement("div"),this.scrollbar.className="sticky-scrollbar "+this.scrollBarClass,this.scrollbar.style.overflowX="auto",this.scrollbar.style.position="fixed",this.scrollbar.style.bottom="0",this.scrollbar.style.zIndex="999",this.fakeContent=document.createElement("div"),this.scrollbar.appendChild(this.fakeContent),this.fakeContent.className="fake-content",this.fakeContent.style.height="1px",XStickyScroll.insertNodeAfter(this.scrollbar,this.scrollView),this.scrollView.addEventListener("scroll",this.onViewScroll),this.scrollbar.addEventListener("scroll",this.onViewScroll),this.onResize()}controlWithinArea(){let t,e,l,s,i=0;this.scrollView&&(i=this.scrollView.offsetHeight-this.scrollView.clientHeight),t=XStickyScroll.topOffset(this.scrollbar),e=XStickyScroll.bottomOffset(this.scrollbar),l=XStickyScroll.topOffset(this.scrollView),s=XStickyScroll.bottomOffset(this.scrollView),this.scrollbar.style.left=t-i>l&&e<s?"":"-9999999px"}fitScrollBar(){this.fakeContent&&this.scrollbar&&this.scrollView&&(this.fakeContent.style.width=this.scrollView.scrollWidth+"px",this.scrollbar.style.width=this.scrollView.offsetWidth+"px")}destroy(){if(this.fakeContent&&this.scrollbar&&this.scrollView)try{this.scrollView.removeEventListener("scroll",this.onViewScroll),this.scrollbar.removeEventListener("scroll",this.onViewScroll),window.removeEventListener("scroll",this.onScroll),window.removeEventListener("resize",this.onResize),this.scrollView.style.overflowY="",this.scrollView.style.whiteSpace="",this.scrollbar.remove(),this.fakeContent.remove(),delete this.scrollbar,delete this.fakeContent,console.log("Have killed DOM elements...")}catch(t){console.error(t)}}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,

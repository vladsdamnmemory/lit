export class ViewportWatcher{constructor(e,t,s=0,i=!1){let r,o,n,c,l,h,a,d;this.nodes=Array.prototype.slice.call(e),this.menuItems=Array.prototype.slice.call(t),this.topOffset=s,this.enableClickListeners=i,this.enableClickListeners&&(this.scrollIntoView=e=>{let t=e.currentTarget||e.target;if(t){let e;e=this.menuItems.indexOf(t),this.nodes[e].scrollIntoView({behavior:"smooth"})}else console.error("Could not find a target of clicked element")},this.menuItems.forEach(e=>{e.addEventListener("click",this.scrollIntoView,!1)})),this.setActive=()=>{let e;for(c=!1,l=window.pageYOffset+this.topOffset,o=0,r=this.nodes.length,n=--r;n>=0;n--)d=this.nodes[n].getBoundingClientRect(),h=d.top+pageYOffset,a=d.bottom+pageYOffset,e=this.menuItems[n],l>=h&&!c||0===n&&l<=a?(ViewportWatcher.classList("add",e),c=!0):ViewportWatcher.classList("remove",e)},window.addEventListener("scroll",this.setActive,!1),window.addEventListener("resize",this.setActive,!1),this.setActive()}static classList(e,t){t.classList[e]("vw-active")}refresh(){this.setActive()}reconstruct(e,t,s=0,i=!1){return this.destroy(),new ViewportWatcher(e,t,s,i)}destroy(){window.removeEventListener("scroll",this.setActive,!1),window.removeEventListener("resize",this.setActive,!1),this.menuItems.forEach(e=>{e.removeEventListener("click",this.scrollIntoView,!1),ViewportWatcher.classList("remove",e)})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9WaWV3cG9ydFdhdGNoZXIuanMiXSwibmFtZXMiOlsiVmlld3BvcnRXYXRjaGVyIiwiW29iamVjdCBPYmplY3RdIiwibm9kZXMiLCJtZW51SXRlbXMiLCJ0b3BPZmZzZXQiLCJlbmFibGVDbGlja0xpc3RlbmVycyIsImFyckxlbmd0aCIsInplcm8iLCJpIiwiY2xhc3NBZGRlZCIsImNsaWVudE9mZnNldCIsImVsT2Zmc2V0VG9wIiwiZWxPZmZzZXRCb3R0b20iLCJib3giLCJ0aGlzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJzY3JvbGxJbnRvVmlldyIsImV2IiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsImluZGV4IiwiaW5kZXhPZiIsImJlaGF2aW9yIiwiY29uc29sZSIsImVycm9yIiwiZm9yRWFjaCIsIml0ZW0iLCJhZGRFdmVudExpc3RlbmVyIiwic2V0QWN0aXZlIiwiZWxlbWVudCIsIndpbmRvdyIsInBhZ2VZT2Zmc2V0IiwibGVuZ3RoIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwiYm90dG9tIiwiY2xhc3NMaXN0IiwiY29tbWFuZCIsImRlc3Ryb3kiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiT0FBTyxNQUFNQSxnQkFDVEMsWUFBWUMsRUFBT0MsRUFBV0MsRUFBWSxFQUFHQyxHQUF1QixHQUNoRSxJQUFJQyxFQUFXQyxFQUFNQyxFQUFHQyxFQUFZQyxFQUFjQyxFQUFhQyxFQUFnQkMsRUFDL0VDLEtBQUtaLE1BQVFhLE1BQU1DLFVBQVVDLE1BQU1DLEtBQUtoQixHQUN4Q1ksS0FBS1gsVUFBWVksTUFBTUMsVUFBVUMsTUFBTUMsS0FBS2YsR0FDNUNXLEtBQUtWLFVBQVlBLEVBQ2pCVSxLQUFLVCxxQkFBdUJBLEVBQ3hCUyxLQUFLVCx1QkFDTFMsS0FBS0ssZUFBa0JDLElBQ25CLElBQUlDLEVBQVNELEVBQUdFLGVBQWlCRixFQUFHQyxPQUNwQyxHQUFJQSxFQUFRLENBQ1IsSUFBSUUsRUFDSkEsRUFBUVQsS0FBS1gsVUFBVXFCLFFBQVFILEdBQy9CUCxLQUFLWixNQUFNcUIsR0FBT0osZUFBZSxDQUFFTSxTQUFVLGdCQUc3Q0MsUUFBUUMsTUFBTSwrQ0FHdEJiLEtBQUtYLFVBQVV5QixRQUFTQyxJQUNwQkEsRUFBS0MsaUJBQWlCLFFBQVNoQixLQUFLSyxnQkFBZ0IsTUFHNURMLEtBQUtpQixVQUFZLEtBQ2IsSUFBSUMsRUFNSixJQUxBdkIsR0FBYSxFQUNiQyxFQUFldUIsT0FBT0MsWUFBY3BCLEtBQUtWLFVBQ3pDRyxFQUFPLEVBQ1BELEVBQVlRLEtBQUtaLE1BQU1pQyxPQUN2QjNCLElBQU1GLEVBQ0VFLEdBSEQsRUFHWUEsSUFDZkssRUFBTUMsS0FBS1osTUFBTU0sR0FBRzRCLHdCQUNwQnpCLEVBQWNFLEVBQUl3QixJQUFNSCxZQUN4QnRCLEVBQWlCQyxFQUFJeUIsT0FBU0osWUFDOUJGLEVBQVVsQixLQUFLWCxVQUFVSyxHQUNyQkUsR0FBZ0JDLElBQWdCRixHQUFvQixJQUFORCxHQUFXRSxHQUFnQkUsR0FDekVaLGdCQUFnQnVDLFVBQVUsTUFBT1AsR0FDakN2QixHQUFhLEdBR2JULGdCQUFnQnVDLFVBQVUsU0FBVVAsSUFJaERDLE9BQU9ILGlCQUFpQixTQUFVaEIsS0FBS2lCLFdBQVcsR0FDbERFLE9BQU9ILGlCQUFpQixTQUFVaEIsS0FBS2lCLFdBQVcsR0FDbERqQixLQUFLaUIsWUFFVDlCLGlCQUFpQnVDLEVBQVNYLEdBQ3RCQSxFQUFnQixVQUFFVyxHQUFTLGFBRS9CdkMsVUFDSWEsS0FBS2lCLFlBRVQ5QixZQUFZQyxFQUFPQyxFQUFXQyxFQUFZLEVBQUdDLEdBQXVCLEdBRWhFLE9BREFTLEtBQUsyQixVQUNFLElBQUl6QyxnQkFBZ0JFLEVBQU9DLEVBQVdDLEVBQVdDLEdBRTVESixVQUNJZ0MsT0FBT1Msb0JBQW9CLFNBQVU1QixLQUFLaUIsV0FBVyxHQUNyREUsT0FBT1Msb0JBQW9CLFNBQVU1QixLQUFLaUIsV0FBVyxHQUNyRGpCLEtBQUtYLFVBQVV5QixRQUFTQyxJQUNwQkEsRUFBS2Esb0JBQW9CLFFBQVM1QixLQUFLSyxnQkFBZ0IsR0FDdkRuQixnQkFBZ0J1QyxVQUFVLFNBQVVWIiwiZmlsZSI6ImxpYi9WaWV3cG9ydFdhdGNoZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVmlld3BvcnRXYXRjaGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihub2RlcywgbWVudUl0ZW1zLCB0b3BPZmZzZXQgPSAwLCBlbmFibGVDbGlja0xpc3RlbmVycyA9IGZhbHNlKSB7XG4gICAgICAgIGxldCBhcnJMZW5ndGgsIHplcm8sIGksIGNsYXNzQWRkZWQsIGNsaWVudE9mZnNldCwgZWxPZmZzZXRUb3AsIGVsT2Zmc2V0Qm90dG9tLCBib3g7XG4gICAgICAgIHRoaXMubm9kZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChub2Rlcyk7XG4gICAgICAgIHRoaXMubWVudUl0ZW1zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobWVudUl0ZW1zKTtcbiAgICAgICAgdGhpcy50b3BPZmZzZXQgPSB0b3BPZmZzZXQ7XG4gICAgICAgIHRoaXMuZW5hYmxlQ2xpY2tMaXN0ZW5lcnMgPSBlbmFibGVDbGlja0xpc3RlbmVycztcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlQ2xpY2tMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsSW50b1ZpZXcgPSAoZXYpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gZXYuY3VycmVudFRhcmdldCB8fCBldi50YXJnZXQ7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5tZW51SXRlbXMuaW5kZXhPZih0YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVzW2luZGV4XS5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiBcInNtb290aFwiIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkIG5vdCBmaW5kIGEgdGFyZ2V0IG9mIGNsaWNrZWQgZWxlbWVudFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5tZW51SXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuc2Nyb2xsSW50b1ZpZXcsIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlID0gKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGVsZW1lbnQ7XG4gICAgICAgICAgICBjbGFzc0FkZGVkID0gZmFsc2U7XG4gICAgICAgICAgICBjbGllbnRPZmZzZXQgPSB3aW5kb3cucGFnZVlPZmZzZXQgKyB0aGlzLnRvcE9mZnNldDtcbiAgICAgICAgICAgIHplcm8gPSAwO1xuICAgICAgICAgICAgYXJyTGVuZ3RoID0gdGhpcy5ub2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICBpID0gLS1hcnJMZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGk7IGkgPj0gemVybzsgaS0tKSB7XG4gICAgICAgICAgICAgICAgYm94ID0gdGhpcy5ub2Rlc1tpXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBlbE9mZnNldFRvcCA9IGJveC50b3AgKyBwYWdlWU9mZnNldDtcbiAgICAgICAgICAgICAgICBlbE9mZnNldEJvdHRvbSA9IGJveC5ib3R0b20gKyBwYWdlWU9mZnNldDtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5tZW51SXRlbXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGNsaWVudE9mZnNldCA+PSBlbE9mZnNldFRvcCAmJiAhY2xhc3NBZGRlZCB8fCBpID09PSAwICYmIGNsaWVudE9mZnNldCA8PSBlbE9mZnNldEJvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICBWaWV3cG9ydFdhdGNoZXIuY2xhc3NMaXN0KFwiYWRkXCIsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBjbGFzc0FkZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFZpZXdwb3J0V2F0Y2hlci5jbGFzc0xpc3QoXCJyZW1vdmVcIiwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5zZXRBY3RpdmUsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuc2V0QWN0aXZlLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlKCk7XG4gICAgfVxuICAgIHN0YXRpYyBjbGFzc0xpc3QoY29tbWFuZCwgaXRlbSkge1xuICAgICAgICBpdGVtW1wiY2xhc3NMaXN0XCJdW2NvbW1hbmRdKFwidnctYWN0aXZlXCIpO1xuICAgIH1cbiAgICByZWZyZXNoKCkge1xuICAgICAgICB0aGlzLnNldEFjdGl2ZSgpO1xuICAgIH1cbiAgICByZWNvbnN0cnVjdChub2RlcywgbWVudUl0ZW1zLCB0b3BPZmZzZXQgPSAwLCBlbmFibGVDbGlja0xpc3RlbmVycyA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gbmV3IFZpZXdwb3J0V2F0Y2hlcihub2RlcywgbWVudUl0ZW1zLCB0b3BPZmZzZXQsIGVuYWJsZUNsaWNrTGlzdGVuZXJzKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuc2V0QWN0aXZlLCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnNldEFjdGl2ZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLm1lbnVJdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpdGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnNjcm9sbEludG9WaWV3LCBmYWxzZSk7XG4gICAgICAgICAgICBWaWV3cG9ydFdhdGNoZXIuY2xhc3NMaXN0KFwicmVtb3ZlXCIsIGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=

export class ViewportWatcher{constructor(e,t,s=0,i=!1){let o,r,n,c,l,h,a,d;this.nodes=Array.prototype.slice.call(e),this.menuItems=Array.prototype.slice.call(t),this.topOffset=s,this.enableClickListeners=i,this.enableClickListeners&&(this.scrollIntoView=e=>{let t;if(t=e.currentTarget||e.target,t){let e,s,i;e=this.menuItems.indexOf(t),s=this.nodes[e],i=s.getBoundingClientRect().top+window.pageYOffset-this.topOffset,window.scrollTo({top:i,behavior:"smooth"})}else console.error("Could not find a target of clicked element")},this.menuItems.forEach(e=>{e.addEventListener("click",this.scrollIntoView,!1)})),this.setActive=()=>{let e;for(c=!1,l=Math.floor(window.pageYOffset+this.topOffset),r=0,o=this.nodes.length,n=--o;n>=0;n--)d=this.nodes[n].getBoundingClientRect(),h=Math.floor(d.top+window.pageYOffset),a=Math.floor(d.bottom+window.pageYOffset),e=this.menuItems[n],l>=h&&!c||0===n&&l<=a?(ViewportWatcher.classList("add",e),c=!0):ViewportWatcher.classList("remove",e)},window.addEventListener("scroll",this.setActive,!1),window.addEventListener("resize",this.setActive,!1),this.setActive()}static classList(e,t){t.classList[e]("vw-active")}refresh(){this.setActive()}reconstruct(e,t,s=0,i=!1){return this.destroy(),new ViewportWatcher(e,t,s,i)}destroy(){window.removeEventListener("scroll",this.setActive,!1),window.removeEventListener("resize",this.setActive,!1),this.menuItems.forEach(e=>{e.removeEventListener("click",this.scrollIntoView,!1),ViewportWatcher.classList("remove",e)})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9WaWV3cG9ydFdhdGNoZXIuanMiXSwibmFtZXMiOlsiVmlld3BvcnRXYXRjaGVyIiwiW29iamVjdCBPYmplY3RdIiwibm9kZXMiLCJtZW51SXRlbXMiLCJ0b3BPZmZzZXQiLCJlbmFibGVDbGlja0xpc3RlbmVycyIsImFyckxlbmd0aCIsInplcm8iLCJpIiwiY2xhc3NBZGRlZCIsImNsaWVudE9mZnNldCIsImVsT2Zmc2V0VG9wIiwiZWxPZmZzZXRCb3R0b20iLCJib3giLCJ0aGlzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJzY3JvbGxJbnRvVmlldyIsImV2IiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsImluZGV4IiwiZWxlbWVudCIsIm9mZnNldCIsImluZGV4T2YiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJ3aW5kb3ciLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvIiwiYmVoYXZpb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJmb3JFYWNoIiwiaXRlbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRBY3RpdmUiLCJNYXRoIiwiZmxvb3IiLCJsZW5ndGgiLCJib3R0b20iLCJjbGFzc0xpc3QiLCJjb21tYW5kIiwiZGVzdHJveSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJPQUFPLE1BQU1BLGdCQUNUQyxZQUFZQyxFQUFPQyxFQUFXQyxFQUFZLEVBQUdDLEdBQXVCLEdBQ2hFLElBQUlDLEVBQVdDLEVBQU1DLEVBQUdDLEVBQVlDLEVBQWNDLEVBQWFDLEVBQWdCQyxFQUMvRUMsS0FBS1osTUFBUWEsTUFBTUMsVUFBVUMsTUFBTUMsS0FBS2hCLEdBQ3hDWSxLQUFLWCxVQUFZWSxNQUFNQyxVQUFVQyxNQUFNQyxLQUFLZixHQUM1Q1csS0FBS1YsVUFBWUEsRUFDakJVLEtBQUtULHFCQUF1QkEsRUFDeEJTLEtBQUtULHVCQUNMUyxLQUFLSyxlQUFrQkMsSUFDbkIsSUFBSUMsRUFFSixHQURBQSxFQUFTRCxFQUFHRSxlQUFpQkYsRUFBR0MsT0FDNUJBLEVBQVEsQ0FDUixJQUFJRSxFQUFPQyxFQUFTQyxFQUNwQkYsRUFBUVQsS0FBS1gsVUFBVXVCLFFBQVFMLEdBQy9CRyxFQUFVVixLQUFLWixNQUFNcUIsR0FDckJFLEVBQVNELEVBQVFHLHdCQUF3QkMsSUFBTUMsT0FBT0MsWUFBY2hCLEtBQUtWLFVBQ3pFeUIsT0FBT0UsU0FBUyxDQUFFSCxJQUFLSCxFQUFRTyxTQUFVLGdCQUd6Q0MsUUFBUUMsTUFBTSwrQ0FHdEJwQixLQUFLWCxVQUFVZ0MsUUFBU0MsSUFDcEJBLEVBQUtDLGlCQUFpQixRQUFTdkIsS0FBS0ssZ0JBQWdCLE1BRzVETCxLQUFLd0IsVUFBWSxLQUNiLElBQUlkLEVBTUosSUFMQWYsR0FBYSxFQUNiQyxFQUFlNkIsS0FBS0MsTUFBTVgsT0FBT0MsWUFBY2hCLEtBQUtWLFdBQ3BERyxFQUFPLEVBQ1BELEVBQVlRLEtBQUtaLE1BQU11QyxPQUN2QmpDLElBQU1GLEVBQ0VFLEdBSEQsRUFHWUEsSUFDZkssRUFBTUMsS0FBS1osTUFBTU0sR0FBR21CLHdCQUNwQmhCLEVBQWM0QixLQUFLQyxNQUFNM0IsRUFBSWUsSUFBTUMsT0FBT0MsYUFDMUNsQixFQUFpQjJCLEtBQUtDLE1BQU0zQixFQUFJNkIsT0FBU2IsT0FBT0MsYUFDaEROLEVBQVVWLEtBQUtYLFVBQVVLLEdBQ3JCRSxHQUFnQkMsSUFBZ0JGLEdBQW9CLElBQU5ELEdBQVdFLEdBQWdCRSxHQUN6RVosZ0JBQWdCMkMsVUFBVSxNQUFPbkIsR0FDakNmLEdBQWEsR0FHYlQsZ0JBQWdCMkMsVUFBVSxTQUFVbkIsSUFJaERLLE9BQU9RLGlCQUFpQixTQUFVdkIsS0FBS3dCLFdBQVcsR0FDbERULE9BQU9RLGlCQUFpQixTQUFVdkIsS0FBS3dCLFdBQVcsR0FDbER4QixLQUFLd0IsWUFFVHJDLGlCQUFpQjJDLEVBQVNSLEdBQ3RCQSxFQUFnQixVQUFFUSxHQUFTLGFBRS9CM0MsVUFDSWEsS0FBS3dCLFlBRVRyQyxZQUFZQyxFQUFPQyxFQUFXQyxFQUFZLEVBQUdDLEdBQXVCLEdBRWhFLE9BREFTLEtBQUsrQixVQUNFLElBQUk3QyxnQkFBZ0JFLEVBQU9DLEVBQVdDLEVBQVdDLEdBRTVESixVQUNJNEIsT0FBT2lCLG9CQUFvQixTQUFVaEMsS0FBS3dCLFdBQVcsR0FDckRULE9BQU9pQixvQkFBb0IsU0FBVWhDLEtBQUt3QixXQUFXLEdBQ3JEeEIsS0FBS1gsVUFBVWdDLFFBQVNDLElBQ3BCQSxFQUFLVSxvQkFBb0IsUUFBU2hDLEtBQUtLLGdCQUFnQixHQUN2RG5CLGdCQUFnQjJDLFVBQVUsU0FBVVAiLCJmaWxlIjoibGliL1ZpZXdwb3J0V2F0Y2hlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBWaWV3cG9ydFdhdGNoZXIge1xuICAgIGNvbnN0cnVjdG9yKG5vZGVzLCBtZW51SXRlbXMsIHRvcE9mZnNldCA9IDAsIGVuYWJsZUNsaWNrTGlzdGVuZXJzID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IGFyckxlbmd0aCwgemVybywgaSwgY2xhc3NBZGRlZCwgY2xpZW50T2Zmc2V0LCBlbE9mZnNldFRvcCwgZWxPZmZzZXRCb3R0b20sIGJveDtcbiAgICAgICAgdGhpcy5ub2RlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG5vZGVzKTtcbiAgICAgICAgdGhpcy5tZW51SXRlbXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtZW51SXRlbXMpO1xuICAgICAgICB0aGlzLnRvcE9mZnNldCA9IHRvcE9mZnNldDtcbiAgICAgICAgdGhpcy5lbmFibGVDbGlja0xpc3RlbmVycyA9IGVuYWJsZUNsaWNrTGlzdGVuZXJzO1xuICAgICAgICBpZiAodGhpcy5lbmFibGVDbGlja0xpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxJbnRvVmlldyA9IChldikgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gZXYuY3VycmVudFRhcmdldCB8fCBldi50YXJnZXQ7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXgsIGVsZW1lbnQsIG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLm1lbnVJdGVtcy5pbmRleE9mKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSB0aGlzLm5vZGVzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQgLSB0aGlzLnRvcE9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKHsgdG9wOiBvZmZzZXQsIGJlaGF2aW9yOiAnc21vb3RoJyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDb3VsZCBub3QgZmluZCBhIHRhcmdldCBvZiBjbGlja2VkIGVsZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMubWVudUl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnNjcm9sbEludG9WaWV3LCBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldEFjdGl2ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGxldCBlbGVtZW50O1xuICAgICAgICAgICAgY2xhc3NBZGRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY2xpZW50T2Zmc2V0ID0gTWF0aC5mbG9vcih3aW5kb3cucGFnZVlPZmZzZXQgKyB0aGlzLnRvcE9mZnNldCk7XG4gICAgICAgICAgICB6ZXJvID0gMDtcbiAgICAgICAgICAgIGFyckxlbmd0aCA9IHRoaXMubm9kZXMubGVuZ3RoO1xuICAgICAgICAgICAgaSA9IC0tYXJyTGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChpOyBpID49IHplcm87IGktLSkge1xuICAgICAgICAgICAgICAgIGJveCA9IHRoaXMubm9kZXNbaV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgZWxPZmZzZXRUb3AgPSBNYXRoLmZsb29yKGJveC50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgICAgICAgICAgIGVsT2Zmc2V0Qm90dG9tID0gTWF0aC5mbG9vcihib3guYm90dG9tICsgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5tZW51SXRlbXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGNsaWVudE9mZnNldCA+PSBlbE9mZnNldFRvcCAmJiAhY2xhc3NBZGRlZCB8fCBpID09PSAwICYmIGNsaWVudE9mZnNldCA8PSBlbE9mZnNldEJvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICBWaWV3cG9ydFdhdGNoZXIuY2xhc3NMaXN0KFwiYWRkXCIsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBjbGFzc0FkZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFZpZXdwb3J0V2F0Y2hlci5jbGFzc0xpc3QoXCJyZW1vdmVcIiwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5zZXRBY3RpdmUsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuc2V0QWN0aXZlLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlKCk7XG4gICAgfVxuICAgIHN0YXRpYyBjbGFzc0xpc3QoY29tbWFuZCwgaXRlbSkge1xuICAgICAgICBpdGVtW1wiY2xhc3NMaXN0XCJdW2NvbW1hbmRdKFwidnctYWN0aXZlXCIpO1xuICAgIH1cbiAgICByZWZyZXNoKCkge1xuICAgICAgICB0aGlzLnNldEFjdGl2ZSgpO1xuICAgIH1cbiAgICByZWNvbnN0cnVjdChub2RlcywgbWVudUl0ZW1zLCB0b3BPZmZzZXQgPSAwLCBlbmFibGVDbGlja0xpc3RlbmVycyA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gbmV3IFZpZXdwb3J0V2F0Y2hlcihub2RlcywgbWVudUl0ZW1zLCB0b3BPZmZzZXQsIGVuYWJsZUNsaWNrTGlzdGVuZXJzKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuc2V0QWN0aXZlLCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnNldEFjdGl2ZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLm1lbnVJdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpdGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnNjcm9sbEludG9WaWV3LCBmYWxzZSk7XG4gICAgICAgICAgICBWaWV3cG9ydFdhdGNoZXIuY2xhc3NMaXN0KFwicmVtb3ZlXCIsIGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=
